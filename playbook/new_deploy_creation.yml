--- 
- name: Inital testing for MySQL NDB cluster
  vars_files:
    - vars/sec_vars.yml
    - vars/deployment_vars.yml
    - vars/aws_template_vars.yml
  hosts: localhost
  gather_facts: false
  tasks:
     # VPC Exists/Create
#    - name: VPC Exists
#      import_tasks:
#        file: tasks/create_vpc.yml

    # Deployment record title/product_id/vpc_id
    - name: Deployment Record Create/exists
      import_tasks:
        file: tasks/deployment_record.yml

    # New project keypair exists or create
    - name: import new key task key_pair
      import_tasks:
        file: tasks/key_pair.yml

    # AWS storage w/access policies for project software and configurations
    - name: Policy for S3 and ECR
      import_tasks:
        file: tasks/create_s3_policy.yml

    - name: S3 Bucket and ECR creation task
      import_tasks:
        file: tasks/create_s3_bucket.yml

    # Networking exists or create
    - name: Create Node communication subnet
      import_tasks:
        file: tasks/subnet.yml

    - name: Create node communication security group
      import_tasks:
        file: tasks/create_security_group.yml

    - name: Show security group sg instance_id
      ansible.builtin.debug:
        var: sg_info['group_id']

    - name: EC2 Assume Role/Profile exists/create
      import_tasks:
        file: tasks/create_assume_role.yml

    - name: AMI Instance exists/create
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        key_name: "{{ key_name }}"
        iam_instance_profile: "{{ instance_profile }}"
        vpc_subnet_id: "{{ subnet_info['subnet']['id'] }}"
        instance_type: "{{ ins_type }}"
        security_groups:
          - "{{ sg }}"
        network:
          assign_public_ip: true
        image_id: "{{ ubu_22_10g }}"
        tags:
          environment: "{{ new_env }}"
      register: ec2
    - debug:
        msg: "{{ ec2 }}"

    - name: Deployment Record Update Instance
      lineinfile:
        state: present
        create: true
        path: "{{ deployment_log }}"
        regexp: 'instance_id:'
        line: "instance_id: {{ ec2['instance_ids'][0] }}"

    - name: Register instance in ad-hoc groups
      add_host:
        hostname: "{{ ec2['instances'][0]['network_interfaces'][0]['association']['public_ip'] }}"
        groups:
          - ec2hosts
          - mycl
          - u22
#          - myclmgr

    - name: Update deployment inventory.yml
      shell: |
        php "{{ script_path }}/update_inventory.php" "{{ groups }}"
      ignore_errors: true
      register: php_output
    - debug:
        msg: "{{ php_output }}"

- name: Run play basic ubuntu server setup
  import_playbook: ubuntu_server_setup.yml

- name: Run play MySQL NDB Cluster
  import_playbook: install_mysql_ndb.yml

- name: create AMI
  import_playbook: generate_ami.yml

- name: create launch templates and ASGs both MGR and Nodes
  import_playbook: create_asgs_mgr_nodes_lts.yml
